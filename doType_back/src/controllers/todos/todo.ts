import {Request, Response} from "express";
import {ITodo} from "../../types/todo";
import Todo from "../../models/todo";


// we import the Response and Request types from the express library.
// we import the ITodo interface from the types directory.
// we import the Todo model from the models directory.


// detTodos will fetch data
const getTodos = async (req: Request, res: Response): Promise<void> => {
    try {
        const todos: ITodo[] = await Todo.find();
        res.status(200).json({todos});
    } catch (error) {
        throw error;
    }
}

// addTodo will add data

const addTodo = async (req: Request, res: Response): Promise<void> => {
    try {
        const body = req.body as Pick<ITodo, "name" | "description" | "status">;

        const todo: ITodo = new Todo({
            name: body.name,
            description: body.description,
            status: body.status
        });

        const newTodo: ITodo = await todo.save();
        const allTodos: ITodo[] = await Todo.find();

        res.status(201).json({message: "Todo added", todo: newTodo, todos: allTodos});
    } catch (error) {
        throw error;
    }
}

// inside the addTodo method we are using the Pick utility type todefine the type of the body object.
// since we previously defined the ITodo interface, we can use it to define the type of the todo object.

//Let's do the same for updateTodo and deleteTodo:

const updateTodo = async (req: Request, res: Response): Promise<void> => {
    try {
        const {
            params: {id},
            body,
        } = req;
        const updateTodo: ITodo | null = await Todo.findByIdAndUpdate(
            {_id: id},
            body
        );
        const allTodos: ITodo[] = await Todo.find();
        res.status(200).json({
            message: "Todo updated",
            todo: updateTodo,
            todos: allTodos,
        });
    } catch (error) {
        throw error;
    }
};

// here with the findByIdAndUpdate method we are passing in the id of the document we want to update and the body of the request. the _id field is a special field that is automatically generated by MongoDB when a document is created.

// deleteTodo will delete data

const deleteTodo = async (req: Request, res: Response): Promise<void> => {
    try {
        const deletedTodo: ITodo | null = await Todo.findByIdAndRemove(
            req.params.id
        );
        const allTodos: ITodo[] = await Todo.find();
        res.status(200).json({
            message: "Todo deleted",
            todo: deletedTodo,
            todos: allTodos,
        });
    } catch (error) {
        throw error;
    }
};

//we are now ready to use the methods we just created.
//we will import them in the routes file and use them as the callback functions for the routes.
//But first let's t


export {getTodos, addTodo, updateTodo, deleteTodo};